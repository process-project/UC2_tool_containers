Bootstrap: docker
From: centos:7

%setup
    mkdir -p ${SINGULARITY_ROOTFS}/opt/lofar

%files
    remotecommand.patch /opt/lofar
    cwl /opt/lofar
    templates /opt/lofar

%environment
    export PYTHONPATH=
    export INSTALLDIR=/opt/lofar
    . $INSTALLDIR/init.sh
    ulimit -n 4096

%post
	# General environment settings.
	export J=8
	export INSTALLDIR=/opt/lofar
	export PYTHON_VERSION=2.7
	export LC_ALL=C

	# Settings relevant to the installed software.
	export ARMADILLO_VERSION=8.600.0
	export BLAS_VERSION=0.2.17
	export BOOST_DOT_VERSION=1.69.0
	export BOOST_VERSION=1_69_0
	export CFITSIO_VERSION=3410
        export FFTW_VERSION=3.3.8
	export HDF5_VERSION=1.8.21
	export LAPACK_VERSION=3.6.0
	export OPENBLAS_VERSION=v0.3.5
	# Do not change, Armadillo wants this version of SuperLU.
	export SUPERLU_VERSION=v5.2.1
	export WCSLIB_VERSION=7.1
	
	yum -y update
	yum -y install patch sudo yum-utils
	yum -y install git svn wget vim nano
	yum -y install automake-devel aclocal autoconf autotools cmake make
	yum -y install g++ gcc gcc-c++ gcc-gfortran
	yum -y install arpack-devel blas-devel boost boost-devel boost-python fftw3-devel fftw3-libs python-devel lapack-devel libpng-devel libxml2-devel numpy-devel readline-devel ncurses-devel f2py bzip2-devel libicu-devel scipy python-setuptools gsl gsl-devel gdal gdal-devel libpqxx libpqxx-devel
	yum -y install bison flex ncurses tar bzip2 which gettext
	yum -y install epel-release
	yum -y install cmake3
	#yum-config-manager --enable epel
	#yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	yum -y install hdf5-devel
	#wget --retry-connrefused https://bootstrap.pypa.io/get-pip.py -O - | pythonwget --retry-connrefused https://bootstrap.pypa.io/get-pip.py -O - | python
	yum -y install python-pip tkinter
	yum -y remove python-numpy python3-numpy
	yum -y remove numpy
	
	yum groups mark install "Development Tools"
	yum groups mark convert "Development Tools"
	yum -y groupinstall "Development Tools"
    yum -y install centos-release-scl
    yum -y install devtoolset-7-gcc*
    scl enable devtoolset-7 bash

	# FACTOR requisites.
	pip install pyparsing
    export CC=`which gcc`
	export CXX=`which g++`
    export make=$INSTALLDIR/make/bin/make

	mkdir -p $INSTALLDIR
    export LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=/opt/intel/mkl/lib/intel64:$CMAKE_PREFIX_PATH
    export CPATH=/opt/intel/mkl/include:$CPATH
    export CFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export CXXFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"


	#
	# Install GNU Make 4
	#
	mkdir -p $INSTALLDIR/make && cd $INSTALLDIR/make
	wget http://ftp.gnu.org/gnu/make/make-4.2.tar.gz && tar xf make-4.2.tar.gz && cd make-4.2
	./configure --prefix=$INSTALLDIR/make && make -j $J && make install
	rm -rf $INSTALLDIR/make/make-4.2.tar.gz

	#
	# Install CMake
	#
	mkdir -p $INSTALLDIR/cmake && cd $INSTALLDIR/cmake
	wget https://github.com/Kitware/CMake/releases/download/v3.13.1/cmake-3.13.1.tar.gz && tar xf cmake-3.13.1.tar.gz && cd cmake-3.13.1
	./bootstrap --prefix=$INSTALLDIR/cmake && $make -j $J && $make install
	rm -rf $INSTALLDIR/cmake/cmake-*

    #
    # Install FFTW
    #
    mkdir -p $INSTALLDIR/fftw
    cd $INSTALLDIR/fftw && wget http://www.fftw.org/fftw-${FFTW_VERSION}.tar.gz && tar xf fftw*.tar.gz
    cd fftw* && ./configure --prefix=$INSTALLDIR/fftw --enable-threads --enable-shared
    $make -j $J
    $make install
    rm -rf $INSTALLDIR/fftw/*.tar.gz

    #
    # Install HDF5
    #
    mkdir -p $INSTALLDIR/hdf5
    cd $INSTALLDIR/hdf5 && wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.21/src/hdf5-1.8.21.tar.gz && tar xf hdf5*.tar.gz
    #cd $INSTALLDIR/hdf5 && wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.4/src/hdf5-1.10.4.tar.gz && tar xf hdf5*.tar.gz
    cd hdf5* && ./configure --prefix=$INSTALLDIR/hdf5 --enable-fortran --enable-cxx --enable-threadsfafe --enable-unsupported && $make -j $J && make install
    rm -rf $INSTALLDIR/hdf5/hdf5*
	
	#
	# Install Boost.Python
	#
	mkdir -p $INSTALLDIR/boost/src
	#cd $INSTALLDIR && wget https://downloads.sourceforge.net/project/boost/boost/1.58.0/boost_1_58_0.tar.gz
	cd $INSTALLDIR && wget https://downloads.sourceforge.net/project/boost/boost/1.69.0/boost_1_69_0.tar.gz
	
    #wget https://dl.bintray.com/boostorg/release/${BOOST_DOT_VERSION}/source/boost_${BOOST_VERSION}.tar.gz
	#cd $INSTALLDIR && tar xzf boost_${BOOST_VERSION}.tar.gz -C boost && cd boost/boost_${BOOST_VERSION} && ./bootstrap.sh --prefix=$INSTALLDIR/boost && ./b2 headers && ./b2 install toolset=gcc cxxflags=-std=c++11 --prefix=$INSTALLDIR/boost --with=all -j $J
	cd $INSTALLDIR && tar xzf boost_${BOOST_VERSION}.tar.gz -C boost && cd boost/boost_${BOOST_VERSION} && ./bootstrap.sh --prefix=$INSTALLDIR/boost && ./b2 headers && ./b2 install toolset=gcc cxxflags=-std=c++11 --prefix=$INSTALLDIR/boost --with=all -j $J
	rm -rf $INSTALLDIR/boost/src $INSTALLDIR/boost_${BOOST_VERSION}.tar.gz $INSTALLDIR/boost/boost_*

	#
	# Install OpenBLAS
	#
	mkdir -p $INSTALLDIR/openblas/
	cd $INSTALLDIR/openblas/ && git clone https://github.com/xianyi/OpenBLAS.git src && cd src && git checkout $OPENBLAS_VERSION
	cd $INSTALLDIR/openblas/src && $make -j $J && $make install PREFIX=$INSTALLDIR/openblas USE_OPENMP=1 NUM_THREADS=64
	rm -rf $INSTALLDIR/openblas/src

	#
	# Install SuperLU
	#
	mkdir -p $INSTALLDIR/superlu/build
	cd $INSTALLDIR/superlu/ && git clone https://github.com/xiaoyeli/superlu.git src && cd src && git checkout $SUPERLU_VERSION
	cd $INSTALLDIR/superlu/build && cmake ../src -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/superlu -DUSE_XSDK_DEFAULTS=TRUE -Denable_blaslib=OFF -DBLAS_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so && $make -j $j && $make install
	rm -rf $INSTALLDIR/superlu/src

	#
	# Install Armadillo
	#
	mkdir -p $INSTALLDIR/armadillo/
	cd $INSTALLDIR/armadillo && wget http://sourceforge.net/projects/arma/files/armadillo-$ARMADILLO_VERSION.tar.xz && tar xf armadillo-$ARMADILLO_VERSION.tar.xz && rm armadillo-$ARMADILLO_VERSION.tar.xz
	cd $INSTALLDIR/armadillo/armadillo-$ARMADILLO_VERSION && ./configure && cmake . -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLDIR/armadillo -Dopenblas_LIBRARY:FILEPATH=$INSTALLDIR/openblas/lib/libopenblas.so  -DSuperLU_INCLUDE_DIR:PATH=$INSTALLDIR/superlu/include -DSuperLU_LIBRARY:FILEPATH=$INSTALLDIR/superlu/lib64/libsuperlu.so && $make -j $J && $make install
	rm -rf $INSTALLDIR/armadillo/armadillo-$ARMADILLO_VERSION.tar.xz


	#
	# install-cfitsio
	#
	mkdir -p ${INSTALLDIR}/cfitsio/build
	cd ${INSTALLDIR}/cfitsio && wget --retry-connrefused https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio${CFITSIO_VERSION}.tar.gz
	cd ${INSTALLDIR}/cfitsio && tar xf cfitsio${CFITSIO_VERSION}.tar.gz
	cd ${INSTALLDIR}/cfitsio/build && cmake -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/cfitsio/ ../cfitsio
	cd ${INSTALLDIR}/cfitsio/build && $make -j ${J}
	cd ${INSTALLDIR}/cfitsio/build && $make install
	rm -rf $INSTALLDIR/cfitsio/cfitsio${CFITSIO_VERSION}.tar.gz

	#
	# install-wcslib
	#
	mkdir ${INSTALLDIR}/wcslib
	if [ "${WCSLIB_VERSION}" = "latest" ]; then cd ${INSTALLDIR}/wcslib && wget --retry-connrefused ftp://anonymous@ftp.atnf.csiro.au/pub/software/wcslib/wcslib.tar.bz2 -O wcslib-latest.tar.bz2; fi
	if [ "${WCSLIB_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/wcslib && wget --retry-connrefused ftp://anonymous@ftp.atnf.csiro.au/pub/software/wcslib/wcslib-${WCSLIB_VERSION}.tar.bz2; fi
	cd ${INSTALLDIR}/wcslib && tar xf wcslib-*.tar.bz2
	#cd ${INSTALLDIR} && mkdir wcslib && cd wcslib && svn checkout https://github.com/astropy/astropy/trunk/cextern/wcslib
	cd ${INSTALLDIR}/wcslib/wcslib* && ./configure --prefix=${INSTALLDIR}/wcslib --with-cfitsiolib=${INSTALLDIR}/cfitsio/lib/ --with-cfitsioinc=${INSTALLDIR}/cfitsio/include/ --without-pgplot
	cd ${INSTALLDIR}/wcslib/wcslib* && $make -j $J
	cd ${INSTALLDIR}/wcslib/wcslib* && $make install
	rm -rf $INSTALLDIR/wcslib/wcslib-*.tar.bz2


	pip install --upgrade pip
	pip install --upgrade setuptools
	pip uninstall -y numpy
	pip install numpy==1.16.4
	#pip install --upgrade numpy astropy scipy matplotlib numexpr
        pip install astropy scipy matplotlib numexpr
        pip install "tables<3.5"
        pip install wheel
	pip install --upgrade boost mock pp progressbar python-monetdb xmlrunner unittest2 regions

	echo "Installation directory contents:"
	ls ${INSTALLDIR}

    yum -y clean all

	#
	# init-lofar
	#
	echo export INSTALLDIR=$INSTALLDIR > $INSTALLDIR/init.sh
	#echo export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\$INSTALLDIR/armadillo/lib64:\$INSTALLDIR/boost/lib:\$INSTALLDIR/cfitsio/lib:\$INSTALLDIR/superlu/lib64:\$INSTALLDIR/wcslib/:\$LD_LIBRARY_PATH  >> $INSTALLDIR/init.sh
        echo export LD_LIBRARY_PATH=\$INSTALLDIR/armadillo/lib64:\$INSTALLDIR/boost/lib:\$INSTALLDIR/cfitsio/lib:\$INSTALLDIR/superlu/lib64:\$INSTALLDIR/wcslib/:\$LD_LIBRARY_PATH  >> $INSTALLDIR/init.sh
	#echo export PATH=/usr/local/cuda/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export make=/opt/lofar/make/bin/make >> $INSTALLDIR/init.sh
    echo export cmake=/opt/lofar/cmake/bin/cmake >> $INSTALLDIR/init.sh

	# Path to where the patch for python-casacore's setup is stored.
	export PYTHON_CASACORE_PATCH=$INSTALLDIR/python-casacore/python_casacore_setup_patch.patch
	export PATCH_LOFAR=$INSTALLDIR/lofar/lofar.patch

	# Settings relevant to the installed software.
	export AOFLAGGER_VERSION=v2.14.1
        #export AOFLAGGER_VERSION=latest
	export CASACORE_VERSION=v2.4.1
	# Leave at latest, release versions crash for some reason.
	export CASAREST_VERSION=latest
	export DYSCO_VERSION=v1.0.1
	export LOFAR_VERSION=3_2_9
	export LOSOTO_VERSION=2.0
	export PYBDSF_VERSION=v1.8.15
	export PYTHON_CASACORE_VERSION=v2.2.1
	export WSCLEAN_VERSION=latest
	export HDF5_USE_FILE_LOCKING=FALSE


    yum -y install vim cmake3
    yum -y install libsigc++20-devel gtkmm30-devel
    #iyum -y install boost169-numpy2
    scl enable devtoolset-7 bash
    export CC=`which gcc`
	export CXX=`which g++`
    export CFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export CXXFLAGS="-std=c++11 -mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export make=$INSTALLDIR/make/bin/make

    # $M: remove previously installed numpy pacckages and reinstall version 1.16.4 from pip
    yum remove -y numpy.x86_64
    pip install numpy==1.16.4

    pip install aplpy h5py pyvo xmlrunner
    pip install pyregion
    # Packaged required for cluster catalog.
    pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
    pip freeze > /opt/lofar/requirements.txt

	mkdir -p $INSTALLDIR


	#
	# Install CASAcore
	#
	mkdir -p ${INSTALLDIR}/casacore/build
	mkdir -p ${INSTALLDIR}/casacore/data
	cd $INSTALLDIR/casacore && git clone https://github.com/casacore/casacore.git src
	if [ "${CASACORE_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/casacore/src && git checkout tags/${CASACORE_VERSION}; fi
	cd ${INSTALLDIR}/casacore/data && wget --retry-connrefused ftp://anonymous@ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar
	cd ${INSTALLDIR}/casacore/data && tar xf WSRT_Measures.ztar
    export CMAKE_PREFIX_PATH=$INSTALLDIR/hdf5
	cd ${INSTALLDIR}/casacore/build && cmake -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/casacore/ -DDATA_DIR=${INSTALLDIR}/casacore/data -DWCSLIB_ROOT_DIR=/${INSTALLDIR}/wcslib/ -DCFITSIO_ROOT_DIR=${INSTALLDIR}/cfitsio/ -DBUILD_PYTHON=True -DUSE_OPENMP=True -DUSE_FFTW3=TRUE -DUSE_HDF5=True -DBLAS_blas_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so -DBOOST_LIBRARYDIR=$INSTALLDIR/boost/lib -DBOOST_INCLUDEDIR=$INSTALLDIR/boost/include ../src/
	cd ${INSTALLDIR}/casacore/build && $make -j ${J}
	cd ${INSTALLDIR}/casacore/build && $make install
    rm -rf $INSTALLDIR/casacore/src

	#
	# install-python-casacore
	#
	# Finding libraries is broken, patch the setup to include the previously installed boost and casacore libraries.
	export PYTHON_VERSION=2.7
	mkdir ${INSTALLDIR}/python-casacore
	cd ${INSTALLDIR}/python-casacore && git clone https://github.com/casacore/python-casacore && wget https://raw.githubusercontent.com/tikk3r/lofar-grid-hpccloud/master/patches/python_casacore_setup_patch.patch
	if [ "$PYTHON_CASACORE_VERSION" != "latest" ]; then cd ${INSTALLDIR}/python-casacore/python-casacore && git checkout tags/${PYTHON_CASACORE_VERSION}; fi
	cd ${INSTALLDIR}/python-casacore/python-casacore && patch setup.py $PYTHON_CASACORE_PATCH && ./setup.py build_ext -I${INSTALLDIR}/wcslib/include:${INSTALLDIR}/casacore/include/:${INSTALLDIR}/cfitsio/include:${INSTALLDIR}/boost/include -L${INSTALLDIR}/wcslib/lib:${INSTALLDIR}/casacore/lib/:${INSTALLDIR}/cfitsio/lib/:${INSTALLDIR}/boost/lib:/usr/lib64/
	mkdir -p ${INSTALLDIR}/python-casacore/lib/python${PYTHON_VERSION}/site-packages/
	mkdir -p ${INSTALLDIR}/python-casacore/lib64/python${PYTHON_VERSION}/site-packages/
	export PYTHONPATH=${INSTALLDIR}/python-casacore/lib/python${PYTHON_VERSION}/site-packages:${INSTALLDIR}/python-casacore/lib64/python${PYTHON_VERSION}/site-packages:$PYTHONPATH && cd ${INSTALLDIR}/python-casacore/python-casacore && ./setup.py install --prefix=${INSTALLDIR}/python-casacore/

	#
	# Install Dysco
	#
	mkdir -p $INSTALLDIR/dysco/build
	cd $INSTALLDIR/dysco && git clone https://github.com/aroffringa/dysco.git src && cd src
	cd $INSTALLDIR/dysco/build && cmake -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/dysco -DCASACORE_ROOT_DIR=$INSTALLDIR/casacore -DBoost_LIBRARY_DIR=$INSTALLDIR/boost/lib -DBoost_INCLUDE_DIR=$INSTALLDIR/boost/include -DPORTABLE=True ../src && $make -j $J && $make install
    rm -rf $INSTALLDIR/dysco/src

	#
	# install-aoflagger
	#
        ln -s $INSTALLDIR/boost/lib/libboost_python27.so.1.69.0 $INSTALLDIR/boost/lib/libboost_numpy.so
        ln -s $INSTALLDIR/boost/lib/libboost_python27.so.1.69.0 $INSTALLDIR/boost/lib/libboost_python.so
	mkdir -p ${INSTALLDIR}/aoflagger/build
	#if [ "${AOFLAGGER_VERSION}" = "latest" ]; then cd ${INSTALLDIR}/aoflagger && git clone git://git.code.sf.net/p/aoflagger/code aoflagger && cd ${INSTALLDIR}/aoflagger/aoflagger; fi
	#if [ "${AOFLAGGER_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/aoflagger && git clone git://git.code.sf.net/p/aoflagger/code aoflagger && cd ${INSTALLDIR}/aoflagger/aoflagger && git checkout tags/${AOFLAGGER_VERSION}; fi
	cd ${INSTALLDIR}/aoflagger && wget --no-check-certificate -c https://sourceforge.net/projects/aoflagger/files/aoflagger-2.14.0/aoflagger-2.14.0.tar.bz2 && tar xjvf aoflagger-2.14.0.tar.bz2
	cd ${INSTALLDIR}/aoflagger/build && cmake -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/aoflagger/ -DCASACORE_ROOT_DIR=${INSTALLDIR}/casacore -DCFITSIO_ROOT_DIR=${INSTALLDIR}/cfitsio -DBUILD_SHARED_LIBS=ON -DBOOST_INCLUDEDIR=$INSTALLDIR/boost/include -DBOOST_LIBRARYDIR=$INSTALLDIR/boost/lib -DBOOST_ROOT=$INSTALLDIR/boost -DBoost_INCLUDE_DIR=$INSTALLDIR/boost/include -DBoost_LIBRARY_DIR=$INSTALLDIR/boost/lib -DBLAS_atlas_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so -DBLAS_f77blas_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so -DBLAS_goto2_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so -DPORTABLE=True ../aoflagger-2.14.0
	cd ${INSTALLDIR}/aoflagger/build && $make -j ${J}
	cd ${INSTALLDIR}/aoflagger/build && $make install
    rm -rf $INSTALLDIR/aoflagger/aoflagger-2.14.0*

	#
	# install-pybdsf
	#
	mkdir -p ${INSTALLDIR}/pybdsf
	if [ "${PYBDSF_VERSION}" = "latest" ]; then cd ${INSTALLDIR}/pybdsf && git clone https://github.com/lofar-astron/pybdsf pybdsf && cd pybdsf; fi
	if [ "${PYBDSF_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/pybdsf && git clone https://github.com/lofar-astron/pybdsf && cd ${INSTALLDIR}/pybdsf/pybdsf && git checkout tags/${PYBDSF_VERSION}; fi
	mkdir -p ${INSTALLDIR}/pybdsf/lib/python${PYTHON_VERSION}/site-packages/ && mkdir -p ${INSTALLDIR}/pybdsf/lib64/python${PYTHON_VERSION}/site-packages/ && export PYTHONPATH=${INSTALLDIR}/pybdsf/lib/python${PYTHON_VERSION}/site-packages:${INSTALLDIR}/pybdsf/lib64/python${PYTHON_VERSION}/site-packages:$PYTHONPATH && cd ${INSTALLDIR}/pybdsf/pybdsf && python setup.py install --prefix=${INSTALLDIR}/pybdsf/
	#pip install https://github.com/lofar-astron/PyBDSF/archive/v1.8.14.tar.gz

	#
	# install-lofar
	#
	mkdir -p ${INSTALLDIR}/lofar
	mkdir -p ${INSTALLDIR}/lofar/build
	mkdir -p ${INSTALLDIR}/lofar/build/gnucxx11_opt
	ls ${INSTALLDIR}
	ls ${INSTALLDIR}/lofar
	ls ${INSTALLDIR}/lofar/build/gnucxx11_opt
	if [ "${LOFAR_VERSION}" = "latest" ]; then cd ${INSTALLDIR}/lofar && svn checkout https://svn.astron.nl/LOFAR/trunk src; fi
	if [ "${LOFAR_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/lofar && svn checkout https://svn.astron.nl/LOFAR/tags/LOFAR-Release-${LOFAR_VERSION} src; fi
	cd $INSTALLDIR/lofar && svn update --depth=infinity $INSTALLDIR/lofar/src/CMake
	wget https://raw.githubusercontent.com/tikk3r/lofar-grid-hpccloud/master/patches/lofar.patch
	patch $INSTALLDIR/lofar/src/CMake/variants/GNUCXX11.cmake $PATCH_LOFAR
	export LD_LIBRARY_PATH=$INSTALLDIR/superlu/lib64:$LD_LIBRARY_PATH
	export CMAKE_PREFIX_PATH=$INSTALLDIR/aoflagger:$INSTALLDIR/armadillo:$INSTALLDIR/boost:$INSTALLDIR/casacore:$INSTALLDIR/casarest:$INSTALLDIR/cfitsio:$INSTALLDIR/dysco:$INSTALLDIR/openblas:$INSTALLDIR/superlu:$INSTALLDIR/wcslib:$INSTALLDIR/hdf5
	export LD_LIBRARY_PATH=$INSTALLDIR/aoflagger/lib:$INSTALLDIR/armadillo/lib64:$INSTALLDIR/boost/lib:$INSTALLDIR/casacore/lib:$INSTALLDIR/cfitsio/lib:$INSTALLDIR/dysco/lib:$INSTALLDIR/openblas/lib:$INSTALLDIR/superlu/lib64:$INSTALLDIR/wcslib/lib
	cd ${INSTALLDIR}/lofar/build/gnucxx11_opt && cmake -DCMAKE_PREFIX_PATH=$INSTALLDIR/aoflagger:$INSTALLDIR/armadillo:$INSTALLDIR/boost:$INSTALLDIR/casacore:$INSTALLDIR/casarest:$INSTALLDIR/cfitsio:$INSTALLDIR/dysco:$INSTALLDIR/openblas:$INSTALLDIR/superlu:$INSTALLDIR/wcslib -DBUILD_PACKAGES="StationResponse pystationresponse ParmDB pyparmdb Pipeline MS" -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/lofar/ -DUSE_LOG4CPLUS=OFF -DUSE_OPENMP=True ${INSTALLDIR}/lofar/src/
	$make -j $J
	$make install
    rm -rf $INSTALLDIR/lofar/src

    #
    # Install the standalone StationResponse libraries.
    #
    echo Installing LOFARBeam...
    #ln -s $INSTALLDIR/boost/lib/libboost_numpy27.so.1.69.0 $INSTALLDIR/boost/lib/libboost_numpy.so
    #ln -s $INSTALLDIR/boost/lib/libboost_python27.so.1.69.0 $INSTALLDIR/boost/lib/libboost_python.so
    mkdir -p $INSTALLDIR/LOFARBeam/build
    cd $INSTALLDIR/LOFARBeam
    git clone https://github.com/lofar-astron/LOFARBeam.git src && cd src
    cd ../build && cmake3 -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/LOFARBeam -DCASACORE_ROOT_DIR=$INSTALLDIR/casacore -DBOOST_ROOT=$INSTALLDIR/boost -DBOOST_LIBRARYDIR=$INSTALLDIR/boost/lib ../src && $make -j $J && $make install
    rm -rf $INSTALLDIR/LOFARBeam/src

    #
    # Install DPPP
    #
    export CPATH=/opt/intel/mkl/include:${INSTALLDIR}/casacore/include:$INSTALLDIR/LOFARBeam/include:$INSTALLDIR/idg/include:$INSTALLDIR/aoflagger/include:$CPATH
    export CMAKE_PREFIX_PATH=$INSTALLDIR/aoflagger:$INSTALLDIR/armadillo:$INSTALLDIR/boost:$INSTALLDIR/casacore:$INSTALLDIR/cfitsio:$INSTALLDIR/hdf5:$INSTALLDIR/superlu:$INSTALLDIR/lofar:$INSTALLDIR/LOFARBeam:$INSTALLDIR/hdf5
    export LD_LIBRARY_PATH=$INSTALLDIR/hdf5/lib:$INSTALLDIR/superlu/lib64:$INSTALLDIR/LOFARBeam/lib:$INSTALLDIR/aoflagger/lib:$LD_LIBRARY_PATH
    mkdir -p $INSTALLDIR/DPPP/build
    git clone https://github.com/lofar-astron/DP3.git $INSTALLDIR/DPPP/src
    cd $INSTALLDIR/DPPP/src && git checkout 8cda70f
    #cd $INSTALLDIR/DPPP/src
    cd $INSTALLDIR/DPPP/build
    cmake3 -DCMAKE_CXX_FLAGS="-D_GLIB_USE_CXX_ABI=1 -DBOOST_NO_CXX11_SCOPED_ENUMS" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLDIR/DPPP -DBoost_INCLUDE_DIR:PATH=$INSTALLDIR/boost/include -DBoost_LIBRARY_DIR_RELEASE:PATH=$INSTALLDIR/boost/lib -DBOOST_ROOT=$INSTALLDIR/boost -DBOOST_LIBRARYDIR=$INSTALLDIR/boost/lib -DLOFAR_STATION_RESPONSE_DIR:PATH=$INSTALLDIR/LOFARBeam/include -DLOFAR_STATION_RESPONSE_LIB:FILEPATH=$INSTALLDIR/LOFARBeam/lib/libstationresponse.so -DAOFLAGGER_INCLUDE_DIR=${INSTALLDIR}/aoflagger/include -DAOFLAGGER_LIB=${INSTALLDIR}/aoflagger/lib/libaoflagger.so ../src
    $make -j $J && $make install
    rm -rf $INSTALLDIR/DPPP/src

	#
	# install-RMextract
	#
	export PYTHONPATH=$INSTALLDIR/RMextract/lib64/python2.7/site-packages:$PYTHONPATH
	echo ${PYTHONPATH}
	mkdir ${INSTALLDIR}/RMextract
	mkdir ${INSTALLDIR}/RMextract/build
	mkdir ${INSTALLDIR}/RMextract/lib64
	mkdir ${INSTALLDIR}/RMextract/lib64/python2.7
	mkdir ${INSTALLDIR}/RMextract/lib64/python2.7/site-packages
	cd ${INSTALLDIR}/RMextract/build && git clone https://github.com/lofar-astron/RMextract.git src && cd src && python setup.py build --add-lofar-utils && python setup.py install --add-lofar-utils --prefix=${INSTALLDIR}/RMextract
	ls ${INSTALLDIR}

	#
	# Install-Losoto
	#
	export PYTHONPATH=/opt/lofar/losoto/lib/python2.7/site-packages/:$PYTHONPATH
	mkdir ${INSTALLDIR}/losoto
	mkdir ${INSTALLDIR}/losoto/build
	mkdir ${INSTALLDIR}/losoto/lib
	mkdir ${INSTALLDIR}/losoto/lib/python2.7
	mkdir ${INSTALLDIR}/losoto/lib/python2.7/site-packages
	export PYTHONPATH=$INSTALLDIR/losoto/lib/python2.7/site-packages:$PYTHONPATH
	cd ${INSTALLDIR}/losoto/build && git clone https://github.com/revoltek/losoto.git src && cd src && python setup.py build && python setup.py install --prefix=${INSTALLDIR}/losoto

	#
	# Install LSMTool.
	#
	mkdir -p $INSTALLDIR/lsmtool/lib/python2.7/site-packages
	export PYTHONPATH=$INSTALLDIR/lsmtool/lib/python2.7/site-packages:$PYTHONPATH
	cd $INSTALLDIR/lsmtool && git clone https://github.com/darafferty/LSMTool.git lsmtool
	cd $INSTALLDIR/lsmtool/lsmtool
	python setup.py install --prefix=$INSTALLDIR/lsmtool

    #
    # Install-WSClean
    #
    export CMAKE_PREFIX_PATH=/opt/intel/mkl/lib/intel64:$INSTALLDIR/armadillo:$INSTALLDIR/boost:$INSTALLDIR/casacore:$INSTALLDIR/cfitsio:$INSTALLDIR/dysco:$INSTALLDIR/idg:$INSTALLDIR/fftw:$INSTALLDIR/lofar:$INSTALLDIR/LOFARBeam:$INSTALLDIR/openblas:$INSTALLDIR/superlu:$INSTALLDIR/wcslib:$INSTALLDIR/hdf5:/usr/lib64
    export LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:$LD_LIBRARY_PATH
    mkdir ${INSTALLDIR}/wsclean
    if [ "$WSCLEAN_VERSION" != "latest" ]; then cd ${INSTALLDIR}/wsclean && wget http://downloads.sourceforge.net/project/wsclean/wsclean-${WSCLEAN_VERSION}/wsclean-${WSCLEAN_VERSION}.tar.bz2 && tar -xjf wsclean-${WSCLEAN_VERSION}.tar.bz2 && cd wsclean-${WSCLEAN_VERSION}; fi
    if [ "$WSCLEAN_VERSION" = "latest" ]; then cd ${INSTALLDIR}/wsclean && git clone git://git.code.sf.net/p/wsclean/code src && cd src && git checkout d171a5 && cd wsclean; fi
    mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/wsclean -DPORTABLE=True -DLOFAR_STATION_RESPONSE_DIR:PATH=$INSTALLDIR/LOFARBeam/include -DLOFAR_STATION_RESPONSE_LIB:FILEPATH=$INSTALLDIR/LOFARBeam/lib/libstationresponse.so -DCASACORE_ROOT_DIR:PATH=$INSTALLDIR/casacore -DCMAKE_PREFIX_PATH="/opt/lofar/lofar" ..
    $make -j ${J}
    $make install

    #
    # Install DS9
    #
    mkdir -p $INSTALLDIR/ds9/bin
    cd $INSTALLDIR/ds9 && wget http://ds9.si.edu/download/centos7/ds9.centos7.8.0.1.tar.gz
    tar xf ds9*.tar.gz -C $INSTALLDIR/ds9/bin

    #
    # Install h5plot
    #
    PYTHONPATH=/usr/local/lib/python3.6/site-packages/:/usr/local/lib64/python3.6/site-packages/ python3 -m pip install https://github.com/revoltek/losoto/archive/pref3.zip
    PYTHONPATH=/usr/local/lib/python3.6/site-packages/:/usr/local/lib64/python3.6/site-packages/ python3 -m pip install h5plot

	echo "Installation directory contents:"
	ls ${INSTALLDIR}

    rm -rf ${INSTALLDIR}/lofar/src
    rm -rf ${INSTALLDIR}/lofar/build/gnu_opt
    rm -rf ${INSTALLDIR}/casacore/src
	rm -rf ${INSTALLDIR}/casarest/src
    yum -y clean all
o
	#
	# init-lofar
	#
	ln -s /opt/lofar/DPPP/bin/DPPP /opt/lofar/lofar/bin/NDPPP
	echo export INSTALLDIR=$INSTALLDIR > $INSTALLDIR/init.sh
	echo export HDF5_USE_FILE_LOCKING=FALSE >> $INSTALLDIR/init.sh
	echo source \$INSTALLDIR/lofar/lofarinit.sh  >> $INSTALLDIR/init.sh
	echo export PYTHONPATH=\$INSTALLDIR/dppp:\$INSTALLDIR/lofar/lib64/python2.7/site-packages:\$INSTALLDIR/losoto/lib/python2.7/site-packages:\$INSTALLDIR/lsmtool/lib/python2.7/site-packages:\$INSTALLDIR/pybdsf/lib/python2.7/site-packages:\$INSTALLDIR/pybdsf/lib64/python2.7/site-packages:\$INSTALLDIR/python-casacore/lib/python2.7/site-packages/:\$INSTALLDIR/python-casacore/lib64/python2.7/site-packages/:\$INSTALLDIR/RMextract/lib64/python2.7/site-packages:\$INSTALLDIR/DPPP/lib64/python2.7/site-packages/:/usr/lib64/python2.7/site-packages  >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/aoflagger/bin:\$PATH  >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/casacore/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/ds9/bin:\$PATH >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/DPPP/bin:\$PATH  >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/dysco/bin:\$PATH  >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/lofar/bin:\$PATH  >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/losoto/bin:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/lsmtool/bin:\$PATH >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/pybdsf/bin:\$PATH >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/RMextract/bin:\$PATH >> $INSTALLDIR/init.sh
	echo export PATH=\$INSTALLDIR/wsclean/bin:\$PATH  >> $INSTALLDIR/init.sh
        #echo export PATH=/usr/local/cuda/bin:\$PATH  >> $INSTALLDIR/init.sh
	echo export LD_LIBRARY_PATH=\$INSTALLDIR/aoflagger/lib:\$INSTALLDIR/armadillo/lib64:\$INSTALLDIR/boost/lib:\$INSTALLDIR/casacore/lib:\$INSTALLDIR/cfitsio/lib:\$INSTALLDIR/DPPP/lib:\$INSTALLDIR/dysco/lib:\$INSTALLDIR/hdf5/lib:\$INSTALLDIR/lofar/lib64:\$INSTALLDIR/LOFARBeam/lib:\$INSTALLDIR/openblas/lib:\$INSTALLDIR/superlu/lib64:\$INSTALLDIR/wcslib/:\$LD_LIBRARY_PATH  >> $INSTALLDIR/init.sh
        echo export LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
        echo export LD_LIBRARY_PATH=\$INSTALLDIR/idg/lib:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
        #echo export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
	echo export OPENBLAS_NUM_THREADS=8 >> $INSTALLDIR/init.sh
	echo export OPENBLAS_MAX_THREADS=16 >> $INSTALLDIR/init.sh
	echo export OMP_NUM_THREADS=8 >> $INSTALLDIR/init.sh
	echo export OMP_MAX_THREADS=16 >> $INSTALLDIR/init.sh
    echo alias h5plot=\"PYTHONPATH=/usr/local/lib/python3.6/site-packages/:/usr/local/lib64/python3.6/site-packages/ h5plot\"

	# Make aware of existing libraries in image
	source ${INSTALLDIR}/init.sh

	# Install specific version of aplpy
	# version 2 depends on python3 which breaks compatibility
	pip install --upgrade 'aplpy>=1,<2'

        pip uninstall -y Jinja2
        pip install Jinja2==2.10.1

	# Link DPPP into lofar folder
	ln -s ${INSTALLDIR}/DPPP/bin/DPPP ${INSTALLDIR}/lofar/bin/DPPP

	# Download factor source
	git clone https://github.com/lofar-astron/factor.git ${INSTALLDIR}/factor
	cd ${INSTALLDIR}/factor

        # SM: patch script make_selfcal_images.py for logging issue
        #patch -i /opt/lofar/make_selfcal_images.patch factor/scripts/make_selfcal_images.py
	patch -i /opt/lofar/remotecommand.patch /opt/lofar/lofar/lib64/python2.7/site-packages/lofarpipe/support/remotecommand.py

	# Install factor
	python setup.py install

	# Missing dependencies after install
	# checkfactor
	pip install shapely

        # install cwltool
        pip install cwltool

        #SM working: yum install -y nodejs nodejs-dev npm libssl-dev
        #SM commented out:apt-get clean
        curl -sL https://rpm.nodesource.com/setup_10.x | bash -
	yum install -y nodejs

        #SM: install prefactor
        git clone https://github.com/lofar-astron/prefactor.git /opt/lofar/prefactor
	cd /opt/lofar/prefactor
	git checkout 92fc0339b31a56ea9aeb49ae84ee89c334a0c543

    #
    # entrypoint
    #
%runscript
	#!/bin/bash
	all_args=()
	for ARGUMENT in "$@"
	do
    		KEY=$(echo $ARGUMENT | cut -f1 -d=)
    		VALUE=$(echo $ARGUMENT | cut -f2 -d=)
    		arg="--${KEY} ${VALUE}"
    		all_args+=( ${arg} )
	done
	cwltool --preserve-entire-environment /opt/lofar/cwl/uc2.cwl "${all_args[@]}"

%help
    This Singularity image acts as a base for the LOFAR installation. It has CentOS 7.5 setup, with the required dependencies installed. These are:
    
    * Armadillo $ARMADILLO_VERSION
    * Boost $BOOST_VERSION
    * CFITSIO $CFITSIO_VERSION
    * SuperLU $SUPERLU_VERSION
    * WCSLIB $WCSLIB_VERSION
    This Singularity image contains an install of LOFAR 3.2.9. In order to run your pipelines, you may need to know where the software is installed. The root directory is /opt/lofar, with all software installed as follows:

    * AOFlagger: $INSTALLDIR/aoflagger
    * Casacore: $INSTALLDIR/casacore
    * DP3: $INSTALLDIR/DPPP
    * DS9: $INSTALLDIR/DS9
    * Dysco: $INSTALLDIR/dysco
    * LOFAR: $INSTALLDIR/lofar
    * LoSoTo: $INSTALLDIR/losoto
    * LSMTool: $INSTALLDIR/lsmtool
    * PyBDSF: $INSTALLDIR/pybdsf
    * RMextract: $INSTALLDIR/RMextract
    * WSClean: $INSTALLDIR/wsclean

    To execute a command, use
        singularity exec -B <paths,that,need,to,be,accessible> <path to image> <command> <arguments>
    for example:
        singularity exec lofar.simg genericpipeline.py -d -c pipeline.cfg pipeline.parset
	Factor version 2.0
	Provides:
		runfactor <parset>
		checkfactor <parset>
		archivefactor <parset> <output dir>
		unarchivefactor <archive dir> <output dir>

	Command example:
	singularity exec -B /var/scratch/${USER} factor.simg runfactor factor.parset

